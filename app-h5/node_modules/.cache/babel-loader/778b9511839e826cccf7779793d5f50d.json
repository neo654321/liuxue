{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.regexp.test.js\");\nrequire(\"core-js/modules/es.string.replace.js\");\n/* eslint no-console:0 */\n/**\n * This module contains general functions that can be used for building\n * different kinds of domTree nodes in a consistent manner.\n */\n\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\nvar greekCapitals = [\"\\\\Gamma\", \"\\\\Delta\", \"\\\\Theta\", \"\\\\Lambda\", \"\\\\Xi\", \"\\\\Pi\", \"\\\\Sigma\", \"\\\\Upsilon\", \"\\\\Phi\", \"\\\\Psi\", \"\\\\Omega\"];\nvar dotlessLetters = [\"\\u0131\",\n// dotless i, \\imath\n\"\\u0237\" // dotless j, \\jmath\n];\n\n/**\n * Makes a symbolNode after translation via the list of symbols in symbols.js.\n * Correctly pulls out metrics for the character, and optionally takes a list of\n * classes to be attached to the node.\n */\nvar makeSymbol = function makeSymbol(value, style, mode, color, classes) {\n  // Replace the value with its replaced value from symbol.js\n  if (symbols[mode][value] && symbols[mode][value].replace) {\n    value = symbols[mode][value].replace;\n  }\n  var metrics = fontMetrics.getCharacterMetrics(value, style);\n  var symbolNode;\n  if (metrics) {\n    symbolNode = new domTree.symbolNode(value, metrics.height, metrics.depth, metrics.italic, metrics.skew, classes);\n  } else {\n    // TODO(emily): Figure out a good way to only print this in development\n    typeof console !== \"undefined\" && console.warn(\"No character metrics for '\" + value + \"' in style '\" + style + \"'\");\n    symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);\n  }\n  if (color) {\n    symbolNode.style.color = color;\n  }\n  return symbolNode;\n};\n\n/**\n * Makes a symbol in Main-Regular or AMS-Regular.\n * Used for rel, bin, open, close, inner, and punct.\n */\nvar mathsym = function mathsym(value, mode, color, classes) {\n  // Decide what font to render the symbol in by its entry in the symbols\n  // table.\n  // Have a special case for when the value = \\ because the \\ is used as a\n  // textord in unsupported command errors but cannot be parsed as a regular\n  // text ordinal and is therefore not present as a symbol in the symbols\n  // table for text\n  if (value === \"\\\\\" || symbols[mode][value].font === \"main\") {\n    return makeSymbol(value, \"Main-Regular\", mode, color, classes);\n  } else {\n    return makeSymbol(value, \"AMS-Regular\", mode, color, classes.concat([\"amsrm\"]));\n  }\n};\n\n/**\n * Makes a symbol in the default font for mathords and textords.\n */\nvar mathDefault = function mathDefault(value, mode, color, classes, type) {\n  if (type === \"mathord\") {\n    return mathit(value, mode, color, classes);\n  } else if (type === \"textord\") {\n    return makeSymbol(value, \"Main-Regular\", mode, color, classes.concat([\"mathrm\"]));\n  } else {\n    throw new Error(\"unexpected type: \" + type + \" in mathDefault\");\n  }\n};\n\n/**\n * Makes a symbol in the italic math font.\n */\nvar mathit = function mathit(value, mode, color, classes) {\n  if (/[0-9]/.test(value.charAt(0)) ||\n  // glyphs for \\imath and \\jmath do not exist in Math-Italic so we\n  // need to use Main-Italic instead\n  utils.contains(dotlessLetters, value) || utils.contains(greekCapitals, value)) {\n    return makeSymbol(value, \"Main-Italic\", mode, color, classes.concat([\"mainit\"]));\n  } else {\n    return makeSymbol(value, \"Math-Italic\", mode, color, classes.concat([\"mathit\"]));\n  }\n};\n\n/**\n * Makes either a mathord or textord in the correct font and color.\n */\nvar makeOrd = function makeOrd(group, options, type) {\n  var mode = group.mode;\n  var value = group.value;\n  if (symbols[mode][value] && symbols[mode][value].replace) {\n    value = symbols[mode][value].replace;\n  }\n  var classes = [\"mord\"];\n  var color = options.getColor();\n  var font = options.font;\n  if (font) {\n    if (font === \"mathit\" || utils.contains(dotlessLetters, value)) {\n      return mathit(value, mode, color, classes);\n    } else {\n      var fontName = fontMap[font].fontName;\n      if (fontMetrics.getCharacterMetrics(value, fontName)) {\n        return makeSymbol(value, fontName, mode, color, classes.concat([font]));\n      } else {\n        return mathDefault(value, mode, color, classes, type);\n      }\n    }\n  } else {\n    return mathDefault(value, mode, color, classes, type);\n  }\n};\n\n/**\n * Calculate the height, depth, and maxFontSize of an element based on its\n * children.\n */\nvar sizeElementFromChildren = function sizeElementFromChildren(elem) {\n  var height = 0;\n  var depth = 0;\n  var maxFontSize = 0;\n  if (elem.children) {\n    for (var i = 0; i < elem.children.length; i++) {\n      if (elem.children[i].height > height) {\n        height = elem.children[i].height;\n      }\n      if (elem.children[i].depth > depth) {\n        depth = elem.children[i].depth;\n      }\n      if (elem.children[i].maxFontSize > maxFontSize) {\n        maxFontSize = elem.children[i].maxFontSize;\n      }\n    }\n  }\n  elem.height = height;\n  elem.depth = depth;\n  elem.maxFontSize = maxFontSize;\n};\n\n/**\n * Makes a span with the given list of classes, list of children, and color.\n */\nvar makeSpan = function makeSpan(classes, children, color) {\n  var span = new domTree.span(classes, children);\n  sizeElementFromChildren(span);\n  if (color) {\n    span.style.color = color;\n  }\n  return span;\n};\n\n/**\n * Makes a document fragment with the given list of children.\n */\nvar makeFragment = function makeFragment(children) {\n  var fragment = new domTree.documentFragment(children);\n  sizeElementFromChildren(fragment);\n  return fragment;\n};\n\n/**\n * Makes an element placed in each of the vlist elements to ensure that each\n * element has the same max font size. To do this, we create a zero-width space\n * with the correct font size.\n */\nvar makeFontSizer = function makeFontSizer(options, fontSize) {\n  var fontSizeInner = makeSpan([], [new domTree.symbolNode(\"\\u200b\")]);\n  fontSizeInner.style.fontSize = fontSize / options.style.sizeMultiplier + \"em\";\n  var fontSizer = makeSpan([\"fontsize-ensurer\", \"reset-\" + options.size, \"size5\"], [fontSizeInner]);\n  return fontSizer;\n};\n\n/**\n * Makes a vertical list by stacking elements and kerns on top of each other.\n * Allows for many different ways of specifying the positioning method.\n *\n * Arguments:\n *  - children: A list of child or kern nodes to be stacked on top of each other\n *              (i.e. the first element will be at the bottom, and the last at\n *              the top). Element nodes are specified as\n *                {type: \"elem\", elem: node}\n *              while kern nodes are specified as\n *                {type: \"kern\", size: size}\n *  - positionType: The method by which the vlist should be positioned. Valid\n *                  values are:\n *                   - \"individualShift\": The children list only contains elem\n *                                        nodes, and each node contains an extra\n *                                        \"shift\" value of how much it should be\n *                                        shifted (note that shifting is always\n *                                        moving downwards). positionData is\n *                                        ignored.\n *                   - \"top\": The positionData specifies the topmost point of\n *                            the vlist (note this is expected to be a height,\n *                            so positive values move up)\n *                   - \"bottom\": The positionData specifies the bottommost point\n *                               of the vlist (note this is expected to be a\n *                               depth, so positive values move down\n *                   - \"shift\": The vlist will be positioned such that its\n *                              baseline is positionData away from the baseline\n *                              of the first child. Positive values move\n *                              downwards.\n *                   - \"firstBaseline\": The vlist will be positioned such that\n *                                      its baseline is aligned with the\n *                                      baseline of the first child.\n *                                      positionData is ignored. (this is\n *                                      equivalent to \"shift\" with\n *                                      positionData=0)\n *  - positionData: Data used in different ways depending on positionType\n *  - options: An Options object\n *\n */\nvar makeVList = function makeVList(children, positionType, positionData, options) {\n  var depth;\n  var currPos;\n  var i;\n  if (positionType === \"individualShift\") {\n    var oldChildren = children;\n    children = [oldChildren[0]];\n\n    // Add in kerns to the list of children to get each element to be\n    // shifted to the correct specified shift\n    depth = -oldChildren[0].shift - oldChildren[0].elem.depth;\n    currPos = depth;\n    for (i = 1; i < oldChildren.length; i++) {\n      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;\n      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);\n      currPos = currPos + diff;\n      children.push({\n        type: \"kern\",\n        size: size\n      });\n      children.push(oldChildren[i]);\n    }\n  } else if (positionType === \"top\") {\n    // We always start at the bottom, so calculate the bottom by adding up\n    // all the sizes\n    var bottom = positionData;\n    for (i = 0; i < children.length; i++) {\n      if (children[i].type === \"kern\") {\n        bottom -= children[i].size;\n      } else {\n        bottom -= children[i].elem.height + children[i].elem.depth;\n      }\n    }\n    depth = bottom;\n  } else if (positionType === \"bottom\") {\n    depth = -positionData;\n  } else if (positionType === \"shift\") {\n    depth = -children[0].elem.depth - positionData;\n  } else if (positionType === \"firstBaseline\") {\n    depth = -children[0].elem.depth;\n  } else {\n    depth = 0;\n  }\n\n  // Make the fontSizer\n  var maxFontSize = 0;\n  for (i = 0; i < children.length; i++) {\n    if (children[i].type === \"elem\") {\n      maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);\n    }\n  }\n  var fontSizer = makeFontSizer(options, maxFontSize);\n\n  // Create a new list of actual children at the correct offsets\n  var realChildren = [];\n  currPos = depth;\n  for (i = 0; i < children.length; i++) {\n    if (children[i].type === \"kern\") {\n      currPos += children[i].size;\n    } else {\n      var child = children[i].elem;\n      var shift = -child.depth - currPos;\n      currPos += child.height + child.depth;\n      var childWrap = makeSpan([], [fontSizer, child]);\n      childWrap.height -= shift;\n      childWrap.depth += shift;\n      childWrap.style.top = shift + \"em\";\n      realChildren.push(childWrap);\n    }\n  }\n\n  // Add in an element at the end with no offset to fix the calculation of\n  // baselines in some browsers (namely IE, sometimes safari)\n  var baselineFix = makeSpan([\"baseline-fix\"], [fontSizer, new domTree.symbolNode(\"\\u200b\")]);\n  realChildren.push(baselineFix);\n  var vlist = makeSpan([\"vlist\"], realChildren);\n  // Fix the final height and depth, in case there were kerns at the ends\n  // since the makeSpan calculation won't take that in to account.\n  vlist.height = Math.max(currPos, vlist.height);\n  vlist.depth = Math.max(-depth, vlist.depth);\n  return vlist;\n};\n\n// A table of size -> font size for the different sizing functions\nvar sizingMultiplier = {\n  size1: 0.5,\n  size2: 0.7,\n  size3: 0.8,\n  size4: 0.9,\n  size5: 1.0,\n  size6: 1.2,\n  size7: 1.44,\n  size8: 1.73,\n  size9: 2.07,\n  size10: 2.49\n};\n\n// A map of spacing functions to their attributes, like size and corresponding\n// CSS class\nvar spacingFunctions = {\n  \"\\\\qquad\": {\n    size: \"2em\",\n    className: \"qquad\"\n  },\n  \"\\\\quad\": {\n    size: \"1em\",\n    className: \"quad\"\n  },\n  \"\\\\enspace\": {\n    size: \"0.5em\",\n    className: \"enspace\"\n  },\n  \"\\\\;\": {\n    size: \"0.277778em\",\n    className: \"thickspace\"\n  },\n  \"\\\\:\": {\n    size: \"0.22222em\",\n    className: \"mediumspace\"\n  },\n  \"\\\\,\": {\n    size: \"0.16667em\",\n    className: \"thinspace\"\n  },\n  \"\\\\!\": {\n    size: \"-0.16667em\",\n    className: \"negativethinspace\"\n  }\n};\n\n/**\n * Maps TeX font commands to objects containing:\n * - variant: string used for \"mathvariant\" attribute in buildMathML.js\n * - fontName: the \"style\" parameter to fontMetrics.getCharacterMetrics\n */\n// A map between tex font commands an MathML mathvariant attribute values\nvar fontMap = {\n  // styles\n  \"mathbf\": {\n    variant: \"bold\",\n    fontName: \"Main-Bold\"\n  },\n  \"mathrm\": {\n    variant: \"normal\",\n    fontName: \"Main-Regular\"\n  },\n  // \"mathit\" is missing because it requires the use of two fonts: Main-Italic\n  // and Math-Italic.  This is handled by a special case in makeOrd which ends\n  // up calling mathit.\n\n  // families\n  \"mathbb\": {\n    variant: \"double-struck\",\n    fontName: \"AMS-Regular\"\n  },\n  \"mathcal\": {\n    variant: \"script\",\n    fontName: \"Caligraphic-Regular\"\n  },\n  \"mathfrak\": {\n    variant: \"fraktur\",\n    fontName: \"Fraktur-Regular\"\n  },\n  \"mathscr\": {\n    variant: \"script\",\n    fontName: \"Script-Regular\"\n  },\n  \"mathsf\": {\n    variant: \"sans-serif\",\n    fontName: \"SansSerif-Regular\"\n  },\n  \"mathtt\": {\n    variant: \"monospace\",\n    fontName: \"Typewriter-Regular\"\n  }\n};\nmodule.exports = {\n  fontMap: fontMap,\n  makeSymbol: makeSymbol,\n  mathsym: mathsym,\n  makeSpan: makeSpan,\n  makeFragment: makeFragment,\n  makeVList: makeVList,\n  makeOrd: makeOrd,\n  sizingMultiplier: sizingMultiplier,\n  spacingFunctions: spacingFunctions\n};","map":null,"metadata":{},"sourceType":"script"}