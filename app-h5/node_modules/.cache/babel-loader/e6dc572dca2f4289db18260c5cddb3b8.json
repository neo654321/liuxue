{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\nvar utils = require(\"./utils\");\nvar ParseError = require(\"./ParseError\");\n\n/* This file contains a list of functions that we parse, identified by\n * the calls to defineFunction.\n *\n * The first argument to defineFunction is a single name or a list of names.\n * All functions named in such a list will share a single implementation.\n *\n * Each declared function can have associated properties, which\n * include the following:\n *\n *  - numArgs: The number of arguments the function takes.\n *             If this is the only property, it can be passed as a number\n *             instead of an element of a properties object.\n *  - argTypes: (optional) An array corresponding to each argument of the\n *              function, giving the type of argument that should be parsed. Its\n *              length should be equal to `numArgs + numOptionalArgs`. Valid\n *              types:\n *               - \"size\": A size-like thing, such as \"1em\" or \"5ex\"\n *               - \"color\": An html color, like \"#abc\" or \"blue\"\n *               - \"original\": The same type as the environment that the\n *                             function being parsed is in (e.g. used for the\n *                             bodies of functions like \\color where the first\n *                             argument is special and the second argument is\n *                             parsed normally)\n *              Other possible types (probably shouldn't be used)\n *               - \"text\": Text-like (e.g. \\text)\n *               - \"math\": Normal math\n *              If undefined, this will be treated as an appropriate length\n *              array of \"original\" strings\n *  - greediness: (optional) The greediness of the function to use ungrouped\n *                arguments.\n *\n *                E.g. if you have an expression\n *                  \\sqrt \\frac 1 2\n *                since \\frac has greediness=2 vs \\sqrt's greediness=1, \\frac\n *                will use the two arguments '1' and '2' as its two arguments,\n *                then that whole function will be used as the argument to\n *                \\sqrt. On the other hand, the expressions\n *                  \\frac \\frac 1 2 3\n *                and\n *                  \\frac \\sqrt 1 2\n *                will fail because \\frac and \\frac have equal greediness\n *                and \\sqrt has a lower greediness than \\frac respectively. To\n *                make these parse, we would have to change them to:\n *                  \\frac {\\frac 1 2} 3\n *                and\n *                  \\frac {\\sqrt 1} 2\n *\n *                The default value is `1`\n *  - allowedInText: (optional) Whether or not the function is allowed inside\n *                   text mode (default false)\n *  - numOptionalArgs: (optional) The number of optional arguments the function\n *                     should parse. If the optional arguments aren't found,\n *                     `null` will be passed to the handler in their place.\n *                     (default 0)\n *\n * The last argument is that implementation, the handler for the function(s).\n * It is called to handle these functions and their arguments.\n * It receives two arguments:\n *  - context contains information and references provided by the parser\n *  - args is an array of arguments obtained from TeX input\n * The context contains the following properties:\n *  - funcName: the text (i.e. name) of the function, including \\\n *  - parser: the parser object\n *  - lexer: the lexer object\n *  - positions: the positions in the overall string of the function\n *               and the arguments.\n * The latter three should only be used to produce error messages.\n *\n * The function should return an object with the following keys:\n *  - type: The type of element that this is. This is then used in\n *          buildHTML/buildMathML to determine which function\n *          should be called to build this node into a DOM node\n * Any other data can be added to the object, which will be passed\n * in to the function in buildHTML/buildMathML as `group.value`.\n */\n\nfunction defineFunction(names, props, handler) {\n  if (typeof names === \"string\") {\n    names = [names];\n  }\n  if (typeof props === \"number\") {\n    props = {\n      numArgs: props\n    };\n  }\n  // Set default values of functions\n  var data = {\n    numArgs: props.numArgs,\n    argTypes: props.argTypes,\n    greediness: props.greediness === undefined ? 1 : props.greediness,\n    allowedInText: !!props.allowedInText,\n    numOptionalArgs: props.numOptionalArgs || 0,\n    handler: handler\n  };\n  for (var i = 0; i < names.length; ++i) {\n    module.exports[names[i]] = data;\n  }\n}\n\n// A normal square root\ndefineFunction(\"\\\\sqrt\", {\n  numArgs: 1,\n  numOptionalArgs: 1\n}, function (context, args) {\n  var index = args[0];\n  var body = args[1];\n  return {\n    type: \"sqrt\",\n    body: body,\n    index: index\n  };\n});\n\n// Some non-mathy text\ndefineFunction(\"\\\\text\", {\n  numArgs: 1,\n  argTypes: [\"text\"],\n  greediness: 2\n}, function (context, args) {\n  var body = args[0];\n  // Since the corresponding buildHTML/buildMathML function expects a\n  // list of elements, we normalize for different kinds of arguments\n  // TODO(emily): maybe this should be done somewhere else\n  var inner;\n  if (body.type === \"ordgroup\") {\n    inner = body.value;\n  } else {\n    inner = [body];\n  }\n  return {\n    type: \"text\",\n    body: inner\n  };\n});\n\n// A two-argument custom color\ndefineFunction(\"\\\\color\", {\n  numArgs: 2,\n  allowedInText: true,\n  greediness: 3,\n  argTypes: [\"color\", \"original\"]\n}, function (context, args) {\n  var color = args[0];\n  var body = args[1];\n  // Normalize the different kinds of bodies (see \\text above)\n  var inner;\n  if (body.type === \"ordgroup\") {\n    inner = body.value;\n  } else {\n    inner = [body];\n  }\n  return {\n    type: \"color\",\n    color: color.value,\n    value: inner\n  };\n});\n\n// An overline\ndefineFunction(\"\\\\overline\", {\n  numArgs: 1\n}, function (context, args) {\n  var body = args[0];\n  return {\n    type: \"overline\",\n    body: body\n  };\n});\n\n// An underline\ndefineFunction(\"\\\\underline\", {\n  numArgs: 1\n}, function (context, args) {\n  var body = args[0];\n  return {\n    type: \"underline\",\n    body: body\n  };\n});\n\n// A box of the width and height\ndefineFunction(\"\\\\rule\", {\n  numArgs: 2,\n  numOptionalArgs: 1,\n  argTypes: [\"size\", \"size\", \"size\"]\n}, function (context, args) {\n  var shift = args[0];\n  var width = args[1];\n  var height = args[2];\n  return {\n    type: \"rule\",\n    shift: shift && shift.value,\n    width: width.value,\n    height: height.value\n  };\n});\n\n// A KaTeX logo\ndefineFunction(\"\\\\KaTeX\", {\n  numArgs: 0\n}, function (context) {\n  return {\n    type: \"katex\"\n  };\n});\ndefineFunction(\"\\\\phantom\", {\n  numArgs: 1\n}, function (context, args) {\n  var body = args[0];\n  var inner;\n  if (body.type === \"ordgroup\") {\n    inner = body.value;\n  } else {\n    inner = [body];\n  }\n  return {\n    type: \"phantom\",\n    value: inner\n  };\n});\n\n// Extra data needed for the delimiter handler down below\nvar delimiterSizes = {\n  \"\\\\bigl\": {\n    type: \"open\",\n    size: 1\n  },\n  \"\\\\Bigl\": {\n    type: \"open\",\n    size: 2\n  },\n  \"\\\\biggl\": {\n    type: \"open\",\n    size: 3\n  },\n  \"\\\\Biggl\": {\n    type: \"open\",\n    size: 4\n  },\n  \"\\\\bigr\": {\n    type: \"close\",\n    size: 1\n  },\n  \"\\\\Bigr\": {\n    type: \"close\",\n    size: 2\n  },\n  \"\\\\biggr\": {\n    type: \"close\",\n    size: 3\n  },\n  \"\\\\Biggr\": {\n    type: \"close\",\n    size: 4\n  },\n  \"\\\\bigm\": {\n    type: \"rel\",\n    size: 1\n  },\n  \"\\\\Bigm\": {\n    type: \"rel\",\n    size: 2\n  },\n  \"\\\\biggm\": {\n    type: \"rel\",\n    size: 3\n  },\n  \"\\\\Biggm\": {\n    type: \"rel\",\n    size: 4\n  },\n  \"\\\\big\": {\n    type: \"textord\",\n    size: 1\n  },\n  \"\\\\Big\": {\n    type: \"textord\",\n    size: 2\n  },\n  \"\\\\bigg\": {\n    type: \"textord\",\n    size: 3\n  },\n  \"\\\\Bigg\": {\n    type: \"textord\",\n    size: 4\n  }\n};\nvar delimiters = [\"(\", \")\", \"[\", \"\\\\lbrack\", \"]\", \"\\\\rbrack\", \"\\\\{\", \"\\\\lbrace\", \"\\\\}\", \"\\\\rbrace\", \"\\\\lfloor\", \"\\\\rfloor\", \"\\\\lceil\", \"\\\\rceil\", \"<\", \">\", \"\\\\langle\", \"\\\\rangle\", \"\\\\lt\", \"\\\\gt\", \"\\\\lvert\", \"\\\\rvert\", \"\\\\lVert\", \"\\\\rVert\", \"\\\\lgroup\", \"\\\\rgroup\", \"\\\\lmoustache\", \"\\\\rmoustache\", \"/\", \"\\\\backslash\", \"|\", \"\\\\vert\", \"\\\\|\", \"\\\\Vert\", \"\\\\uparrow\", \"\\\\Uparrow\", \"\\\\downarrow\", \"\\\\Downarrow\", \"\\\\updownarrow\", \"\\\\Updownarrow\", \".\"];\nvar fontAliases = {\n  \"\\\\Bbb\": \"\\\\mathbb\",\n  \"\\\\bold\": \"\\\\mathbf\",\n  \"\\\\frak\": \"\\\\mathfrak\"\n};\n\n// Single-argument color functions\ndefineFunction([\"\\\\blue\", \"\\\\orange\", \"\\\\pink\", \"\\\\red\", \"\\\\green\", \"\\\\gray\", \"\\\\purple\", \"\\\\blueA\", \"\\\\blueB\", \"\\\\blueC\", \"\\\\blueD\", \"\\\\blueE\", \"\\\\tealA\", \"\\\\tealB\", \"\\\\tealC\", \"\\\\tealD\", \"\\\\tealE\", \"\\\\greenA\", \"\\\\greenB\", \"\\\\greenC\", \"\\\\greenD\", \"\\\\greenE\", \"\\\\goldA\", \"\\\\goldB\", \"\\\\goldC\", \"\\\\goldD\", \"\\\\goldE\", \"\\\\redA\", \"\\\\redB\", \"\\\\redC\", \"\\\\redD\", \"\\\\redE\", \"\\\\maroonA\", \"\\\\maroonB\", \"\\\\maroonC\", \"\\\\maroonD\", \"\\\\maroonE\", \"\\\\purpleA\", \"\\\\purpleB\", \"\\\\purpleC\", \"\\\\purpleD\", \"\\\\purpleE\", \"\\\\mintA\", \"\\\\mintB\", \"\\\\mintC\", \"\\\\grayA\", \"\\\\grayB\", \"\\\\grayC\", \"\\\\grayD\", \"\\\\grayE\", \"\\\\grayF\", \"\\\\grayG\", \"\\\\grayH\", \"\\\\grayI\", \"\\\\kaBlue\", \"\\\\kaGreen\"], {\n  numArgs: 1,\n  allowedInText: true,\n  greediness: 3\n}, function (context, args) {\n  var body = args[0];\n  var atoms;\n  if (body.type === \"ordgroup\") {\n    atoms = body.value;\n  } else {\n    atoms = [body];\n  }\n  return {\n    type: \"color\",\n    color: \"katex-\" + context.funcName.slice(1),\n    value: atoms\n  };\n});\n\n// There are 2 flags for operators; whether they produce limits in\n// displaystyle, and whether they are symbols and should grow in\n// displaystyle. These four groups cover the four possible choices.\n\n// No limits, not symbols\ndefineFunction([\"\\\\arcsin\", \"\\\\arccos\", \"\\\\arctan\", \"\\\\arg\", \"\\\\cos\", \"\\\\cosh\", \"\\\\cot\", \"\\\\coth\", \"\\\\csc\", \"\\\\deg\", \"\\\\dim\", \"\\\\exp\", \"\\\\hom\", \"\\\\ker\", \"\\\\lg\", \"\\\\ln\", \"\\\\log\", \"\\\\sec\", \"\\\\sin\", \"\\\\sinh\", \"\\\\tan\", \"\\\\tanh\"], {\n  numArgs: 0\n}, function (context) {\n  return {\n    type: \"op\",\n    limits: false,\n    symbol: false,\n    body: context.funcName\n  };\n});\n\n// Limits, not symbols\ndefineFunction([\"\\\\det\", \"\\\\gcd\", \"\\\\inf\", \"\\\\lim\", \"\\\\liminf\", \"\\\\limsup\", \"\\\\max\", \"\\\\min\", \"\\\\Pr\", \"\\\\sup\"], {\n  numArgs: 0\n}, function (context) {\n  return {\n    type: \"op\",\n    limits: true,\n    symbol: false,\n    body: context.funcName\n  };\n});\n\n// No limits, symbols\ndefineFunction([\"\\\\int\", \"\\\\iint\", \"\\\\iiint\", \"\\\\oint\"], {\n  numArgs: 0\n}, function (context) {\n  return {\n    type: \"op\",\n    limits: false,\n    symbol: true,\n    body: context.funcName\n  };\n});\n\n// Limits, symbols\ndefineFunction([\"\\\\coprod\", \"\\\\bigvee\", \"\\\\bigwedge\", \"\\\\biguplus\", \"\\\\bigcap\", \"\\\\bigcup\", \"\\\\intop\", \"\\\\prod\", \"\\\\sum\", \"\\\\bigotimes\", \"\\\\bigoplus\", \"\\\\bigodot\", \"\\\\bigsqcup\", \"\\\\smallint\"], {\n  numArgs: 0\n}, function (context) {\n  return {\n    type: \"op\",\n    limits: true,\n    symbol: true,\n    body: context.funcName\n  };\n});\n\n// Fractions\ndefineFunction([\"\\\\dfrac\", \"\\\\frac\", \"\\\\tfrac\", \"\\\\dbinom\", \"\\\\binom\", \"\\\\tbinom\"], {\n  numArgs: 2,\n  greediness: 2\n}, function (context, args) {\n  var numer = args[0];\n  var denom = args[1];\n  var hasBarLine;\n  var leftDelim = null;\n  var rightDelim = null;\n  var size = \"auto\";\n  switch (context.funcName) {\n    case \"\\\\dfrac\":\n    case \"\\\\frac\":\n    case \"\\\\tfrac\":\n      hasBarLine = true;\n      break;\n    case \"\\\\dbinom\":\n    case \"\\\\binom\":\n    case \"\\\\tbinom\":\n      hasBarLine = false;\n      leftDelim = \"(\";\n      rightDelim = \")\";\n      break;\n    default:\n      throw new Error(\"Unrecognized genfrac command\");\n  }\n  switch (context.funcName) {\n    case \"\\\\dfrac\":\n    case \"\\\\dbinom\":\n      size = \"display\";\n      break;\n    case \"\\\\tfrac\":\n    case \"\\\\tbinom\":\n      size = \"text\";\n      break;\n  }\n  return {\n    type: \"genfrac\",\n    numer: numer,\n    denom: denom,\n    hasBarLine: hasBarLine,\n    leftDelim: leftDelim,\n    rightDelim: rightDelim,\n    size: size\n  };\n});\n\n// Left and right overlap functions\ndefineFunction([\"\\\\llap\", \"\\\\rlap\"], {\n  numArgs: 1,\n  allowedInText: true\n}, function (context, args) {\n  var body = args[0];\n  return {\n    type: context.funcName.slice(1),\n    body: body\n  };\n});\n\n// Delimiter functions\ndefineFunction([\"\\\\bigl\", \"\\\\Bigl\", \"\\\\biggl\", \"\\\\Biggl\", \"\\\\bigr\", \"\\\\Bigr\", \"\\\\biggr\", \"\\\\Biggr\", \"\\\\bigm\", \"\\\\Bigm\", \"\\\\biggm\", \"\\\\Biggm\", \"\\\\big\", \"\\\\Big\", \"\\\\bigg\", \"\\\\Bigg\", \"\\\\left\", \"\\\\right\"], {\n  numArgs: 1\n}, function (context, args) {\n  var delim = args[0];\n  if (!utils.contains(delimiters, delim.value)) {\n    throw new ParseError(\"Invalid delimiter: '\" + delim.value + \"' after '\" + context.funcName + \"'\", context.lexer, context.positions[1]);\n  }\n\n  // \\left and \\right are caught somewhere in Parser.js, which is\n  // why this data doesn't match what is in buildHTML.\n  if (context.funcName === \"\\\\left\" || context.funcName === \"\\\\right\") {\n    return {\n      type: \"leftright\",\n      value: delim.value\n    };\n  } else {\n    return {\n      type: \"delimsizing\",\n      size: delimiterSizes[context.funcName].size,\n      delimType: delimiterSizes[context.funcName].type,\n      value: delim.value\n    };\n  }\n});\n\n// Sizing functions (handled in Parser.js explicitly, hence no handler)\ndefineFunction([\"\\\\tiny\", \"\\\\scriptsize\", \"\\\\footnotesize\", \"\\\\small\", \"\\\\normalsize\", \"\\\\large\", \"\\\\Large\", \"\\\\LARGE\", \"\\\\huge\", \"\\\\Huge\"], 0, null);\n\n// Style changing functions (handled in Parser.js explicitly, hence no\n// handler)\ndefineFunction([\"\\\\displaystyle\", \"\\\\textstyle\", \"\\\\scriptstyle\", \"\\\\scriptscriptstyle\"], 0, null);\ndefineFunction([\n// styles\n\"\\\\mathrm\", \"\\\\mathit\", \"\\\\mathbf\",\n// families\n\"\\\\mathbb\", \"\\\\mathcal\", \"\\\\mathfrak\", \"\\\\mathscr\", \"\\\\mathsf\", \"\\\\mathtt\",\n// aliases\n\"\\\\Bbb\", \"\\\\bold\", \"\\\\frak\"], {\n  numArgs: 1,\n  greediness: 2\n}, function (context, args) {\n  var body = args[0];\n  var func = context.funcName;\n  if (func in fontAliases) {\n    func = fontAliases[func];\n  }\n  return {\n    type: \"font\",\n    font: func.slice(1),\n    body: body\n  };\n});\n\n// Accents\ndefineFunction([\"\\\\acute\", \"\\\\grave\", \"\\\\ddot\", \"\\\\tilde\", \"\\\\bar\", \"\\\\breve\", \"\\\\check\", \"\\\\hat\", \"\\\\vec\", \"\\\\dot\"\n// We don't support expanding accents yet\n// \"\\\\widetilde\", \"\\\\widehat\"\n], {\n  numArgs: 1\n}, function (context, args) {\n  var base = args[0];\n  return {\n    type: \"accent\",\n    accent: context.funcName,\n    base: base\n  };\n});\n\n// Infix generalized fractions\ndefineFunction([\"\\\\over\", \"\\\\choose\"], {\n  numArgs: 0\n}, function (context) {\n  var replaceWith;\n  switch (context.funcName) {\n    case \"\\\\over\":\n      replaceWith = \"\\\\frac\";\n      break;\n    case \"\\\\choose\":\n      replaceWith = \"\\\\binom\";\n      break;\n    default:\n      throw new Error(\"Unrecognized infix genfrac command\");\n  }\n  return {\n    type: \"infix\",\n    replaceWith: replaceWith\n  };\n});\n\n// Row breaks for aligned data\ndefineFunction([\"\\\\\\\\\", \"\\\\cr\"], {\n  numArgs: 0,\n  numOptionalArgs: 1,\n  argTypes: [\"size\"]\n}, function (context, args) {\n  var size = args[0];\n  return {\n    type: \"cr\",\n    size: size\n  };\n});\n\n// Environment delimiters\ndefineFunction([\"\\\\begin\", \"\\\\end\"], {\n  numArgs: 1,\n  argTypes: [\"text\"]\n}, function (context, args) {\n  var nameGroup = args[0];\n  if (nameGroup.type !== \"ordgroup\") {\n    throw new ParseError(\"Invalid environment name\", context.lexer, context.positions[1]);\n  }\n  var name = \"\";\n  for (var i = 0; i < nameGroup.value.length; ++i) {\n    name += nameGroup.value[i].value;\n  }\n  return {\n    type: \"environment\",\n    name: name,\n    namepos: context.positions[1]\n  };\n});","map":null,"metadata":{},"sourceType":"script"}