{"ast":null,"code":"// Process ^superscript^\n\n'use strict';\n\n// same as UNESCAPE_MD_RE plus a space\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.slice.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.string.match.js\");\nrequire(\"core-js/modules/es.string.replace.js\");\nvar UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\nfunction superscript(state, silent) {\n  var found,\n    content,\n    token,\n    max = state.posMax,\n    start = state.pos;\n  if (state.src.charCodeAt(start) !== 0x5E /* ^ */) {\n    return false;\n  }\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n  if (start + 2 >= max) {\n    return false;\n  }\n  state.pos = start + 1;\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x5E /* ^ */) {\n      found = true;\n      break;\n    }\n    state.md.inline.skipToken(state);\n  }\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n    return false;\n  }\n  content = state.src.slice(start + 1, state.pos);\n\n  // don't allow unescaped spaces/newlines inside\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start;\n    return false;\n  }\n\n  // found!\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  // Earlier we checked !silent, but this implementation does not need it\n  token = state.push('sup_open', 'sup', 1);\n  token.markup = '^';\n  token = state.push('text', '', 0);\n  token.content = content.replace(UNESCAPE_RE, '$1');\n  token = state.push('sup_close', 'sup', -1);\n  token.markup = '^';\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n  return true;\n}\nmodule.exports = function sup_plugin(md) {\n  md.inline.ruler.after('emphasis', 'sup', superscript);\n};","map":null,"metadata":{},"sourceType":"script"}