{"ast":null,"code":"import \"vant/es/locale/style\";\nimport _Locale from \"vant/es/locale\";\nimport _objectSpread from \"/Users/neo/Desktop/node/liuxue/app-h5/node_modules/.pnpm/@babel+runtime@7.20.7/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// 引入必要的库\nimport Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nimport enUS from 'vant/lib/locale/lang/en-US';\nimport zhCN from 'vant/lib/locale/lang/zh-CN';\nimport zhTW from 'vant/lib/locale/lang/zh-TW';\n/**\n * 中文简体(cn)   中文繁体(tw)   英语(en)   德语(de)   法语(fr)   日语(ja)   韩语(ko)   马来西亚语(ms)   \n * 泰国语(th)   葡萄牙语(pt)   西班牙语(es)   俄语(ru)   希腊语(el)   意大利语(it)   土耳其语(tr)   \n * 南非荷兰语(af) 菲律宾(ph)   越南语(vi)   印度语(hi)   印度尼西亚语(id)  波兰语(pl)\n */\n// 引入工具函数\nimport { getStorage, setStorage, getBrowserLang } from '@/utils/utis';\n// 引入项目中需要用到的中英文文案配置js\nimport enLocale from './en';\nimport cnLocale from './cn';\n\n// 使用vue-i18n库\nVue.use(VueI18n);\ngetStorage('lang') == null && localStorage.setItem('lang', 'en');\n// 获取当前语言（初始化时localStorage里没有存语言，默认为en）\nvar lang = localStorage.getItem('lang') || 'en';\nif (lang == 'en-US' || lang == '\"en-US\"') {\n  lang = 'en';\n} else if (lang == 'zh-CN' || lang == \"'zh-CN'\") {\n  lang = 'cn';\n} else if (lang == 'zh-TW' || lang == \"'zh-TW'\") {\n  lang = 'tw';\n}\nlocalStorage.setItem('lang', lang);\n// process.env.VUE_APP_PUT_ON_SHELVES && (lang = 'en')\n// 组合element ui 和 项目自身的文案文件\nvar messages = {\n  'en': _objectSpread(_objectSpread({}, enUS), enLocale),\n  'cn': _objectSpread(_objectSpread({}, zhCN), cnLocale)\n};\n// 创建vueI18n实例并输出，在main.js中调用\nexport var i18n = new VueI18n({\n  locale: lang || 'en',\n  messages\n});\n// 更新vant组件库本身的语言变化，支持国际化\nexport function vantLocales(lang) {\n  if (lang === 'en') {\n    _Locale.use(lang, enUS);\n  } else if (lang === 'cn') {\n    _Locale.use(lang, zhCN);\n  } else {\n    _Locale.use(lang, zhCN);\n  }\n}\nexport default {\n  i18n,\n  vantLocales\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}