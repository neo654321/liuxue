{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport store from '@/store';\nimport moment from \"moment-timezone\";\nexport var getUrlVal = function getUrlVal(name) {\n  var url = location.href;\n  var urlStr = url === null || url === void 0 ? void 0 : url.split('?')[1];\n  // 创建空对象存储参数\n  var obj = {};\n  // 再通过 & 将每一个参数单独分割出来\n  var paramsArr = urlStr === null || urlStr === void 0 ? void 0 : urlStr.split('&');\n  if (paramsArr) {\n    for (var i = 0, len = paramsArr === null || paramsArr === void 0 ? void 0 : paramsArr.length; i < len; i++) {\n      var _paramsArr$i;\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      var arr = (_paramsArr$i = paramsArr[i]) === null || _paramsArr$i === void 0 ? void 0 : _paramsArr$i.split('=');\n      obj[arr[0]] = arr[1];\n    }\n  }\n  return obj[name];\n};\n/**\n * \n *  判断是否是手机端\n */\nexport var is_mobile = function is_mobile() {\n  var regex_match = /(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^benq|haier|^lct|operas*mobi|opera*mini|320x320|240x320|176x220)/i;\n  var u = navigator.userAgent;\n  if (null == u) {\n    return true;\n  }\n  var result = regex_match.exec(u);\n  if (null == result) {\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * @description 时间格式处理\n */\nexport var formatData = function formatData(data) {\n  var thisData = formatTime(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n  var myData = data.substr(0, 10);\n  if (thisData == myData) {\n    var Time = data.substr(11, 5);\n    return Time;\n  } else {\n    if (thisData.substr(0, 4) == myData.substr(0, 4) && thisData != myData) {\n      var Data = data.substr(5, 11);\n      return Data;\n    } else {\n      var Year = myData;\n      return Year;\n    }\n  }\n};\n\n/**\n * @description 时间格式转化\n * @param {String} date 日期\n * @param {String} fmt 需要的格式\n */\nexport var formatTime = function formatTime(date, fmt) {\n  var o = {\n    \"M+\": date.getMonth() + 1,\n    //月份\n    \"d+\": date.getDate(),\n    //日\n    \"h+\": date.getHours(),\n    //小时\n    \"m+\": date.getMinutes(),\n    //分\n    \"s+\": date.getSeconds(),\n    //秒\n    \"q+\": Math.floor((date.getMonth() + 3) / 3),\n    //季度\n    \"S\": date.getMilliseconds() //毫秒\n  };\n\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  for (var k in o) if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n  return fmt;\n};\n\n/**\n * @description 验证手机号格式是否正确\n * @param {String} mobile 电话号码\n */\nexport var checkMobileformat = function checkMobileformat(mobile) {\n  return /^1[345789]\\d{9}$/.test(mobile);\n};\n\n/**\n * @description Array clear empty item.\n * @param {Array} array\n */\nexport var arrayClearEmptyItem = function arrayClearEmptyItem(array) {\n  return array.filter(function (item) {\n    return item;\n  });\n};\n\n/**\n * @description 判断一个日期是过去还是未来\n * @param {String} d 要判断的日期\n * @returns past => false   future => true\n */\nexport var judgeDateIsPastOrFuture = function judgeDateIsPastOrFuture(d) {\n  if (!d) {\n    return false;\n  }\n  var nowDate = new Date();\n  var nowTimeStamp = nowDate.getTime();\n  var date = new Date(d.replace(/-/g, \"/\"));\n  var dateTimeStamp = date.getTime();\n  return nowTimeStamp < dateTimeStamp;\n};\n\n/**\n * @description 判断一个字符串中是否有重复的项（0-9, a-z, A-Z）\n * @param {String} str 判断的目标字符串\n * @returns {Boolean} true: 有重复项   false: 无重复项\n */\nexport var strIsReplace = function strIsReplace(str) {\n  var passwordRule = /[0-9a-zA-Z]/;\n  var arr = str.split(\"\");\n  for (var i = 0; i < arr.length; i++) {\n    var element = arr[i];\n    if (passwordRule.test(element)) {\n      if (i === arr.length - 1) {\n        return false;\n      }\n      if (str.includes(element, i + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n// 设置localStorage\nexport var setStorage = function setStorage(key, obj) {\n  var json = JSON.stringify(obj);\n  window.localStorage.setItem(key, json);\n};\n\n// 获取localStorage\nexport var getStorage = function getStorage(key) {\n  var str = window.localStorage.getItem(key);\n  if (!str) {\n    return null;\n  }\n  return str;\n};\n\n// 移除localStorage\nexport var removeStorage = function removeStorage(key) {\n  window.localStorage.removeItem(key);\n};\n\n// 获取浏览器默认语言\nexport var getBrowserLang = function getBrowserLang() {\n  var browserLang = navigator.language ? navigator.language : navigator.browserLanguage;\n  var defaultBrowserLang = '';\n  if ((browserLang === null || browserLang === void 0 ? void 0 : browserLang.toLowerCase()) === 'cn' || (browserLang === null || browserLang === void 0 ? void 0 : browserLang.toLowerCase()) === 'zh' || (browserLang === null || browserLang === void 0 ? void 0 : browserLang.toLowerCase()) === 'cn') {\n    defaultBrowserLang = 'cn';\n  } else {\n    defaultBrowserLang = 'en';\n  }\n  return defaultBrowserLang;\n};\n\n// 是否登录\nexport var isLogin = function isLogin() {\n  return store.getters.userInfo && localStorage.getItem('token');\n};\n\n// 图片地址\nexport var getImgUrl = function getImgUrl(path) {\n  return \"https://rfbhabkjk.com/wap/public/showimg!showImg.action?imagePath=\".concat(path);\n};\n\n/**\n * 数字千位符格式化\n * eg:\n * 17267737 -> 17,267,737\n */\nexport var priceFormat = function priceFormat(num, int) {\n  if (num && Number(num)) {\n    var numStr = _toFixed(num, 2);\n    var numPre = numStr.slice(0, numStr.indexOf('.'));\n    var numRi = numStr.slice(numStr.indexOf('.') + 1);\n    var intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    var floatStr = numRi ? \".\".concat(numRi.length < 2 ? numRi + '0' : numRi) : '.00';\n    return int ? \"\".concat(intStr) : \"\".concat(intStr).concat(floatStr);\n  } else {\n    return 0;\n  }\n};\nexport var priceFormat8 = function priceFormat8(num, int) {\n  if (num && Number(num)) {\n    var numStr = _toFixed(num, 10);\n    var numPre = numStr.slice(0, numStr.indexOf('.'));\n    var numRi = numStr.slice(numStr.indexOf('.') + 1);\n    var intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    var floatStr = numRi ? \".\".concat(numRi.length < 2 ? numRi + '0' : numRi) : '.00';\n    return int ? \"\".concat(intStr) : \"\".concat(intStr).concat(floatStr);\n  } else {\n    return 0;\n  }\n};\nexport var priceFormatInt = function priceFormatInt(num) {\n  if (num && Number(num)) {\n    var numStr = _toFixed(num, 2);\n    var numPre = numStr.slice(0, numStr.indexOf('.'));\n    var numRi = numStr.slice(numStr.indexOf('.') + 1);\n    var intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    var floatStr = numRi ? \".\".concat(numRi.length < 2 ? numRi + '0' : numRi) : '.00';\n    return intStr;\n  } else {\n    return 0;\n  }\n};\nexport var formatZoneDate = function formatZoneDate(time) {\n  if (!time) return '--';\n  //设置服务器默认时区\n  moment.tz.setDefault('Asia/Shanghai');\n  time = moment(time);\n  //获取当前时区\n  var timezone = moment.tz.guess(true);\n  //time转成当前时区的时间\n  time = moment.tz(time, timezone).format('YYYY-MM-DD HH:mm:ss');\n  return time;\n};\n// 不要四舍五入 直接截取\nvar _toFixed = function _toFixed(num, decimal) {\n  num = num.toString();\n  var index = num.indexOf('.');\n  if (index !== -1) {\n    num = num.substring(0, decimal + index + 1);\n  } else {\n    num = num.substring(0);\n  }\n  return parseFloat(num).toFixed(decimal);\n};\n\n/**\n * 身份证/护照号码验证\n * 验证字母或者数字\n */\n\nexport var isAlphanumeric = function isAlphanumeric(str) {\n  return /^[a-zA-Z0-9]+$/.test(str);\n};\n\n// 数组对象去重\nexport var deduplication = function deduplication(arr, key) {\n  var res = new Map();\n  return arr.filter(function (arr) {\n    return !res.has(arr[key]) && res.set(arr[key], 1);\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}