{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.slice.js\");\n/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n */\nfunction ParseError(message, lexer, position) {\n  var error = \"KaTeX parse error: \" + message;\n  if (lexer !== undefined && position !== undefined) {\n    // If we have the input and a position, make the error a bit fancier\n\n    // Prepend some information\n    error += \" at position \" + position + \": \";\n\n    // Get the input\n    var input = lexer._input;\n    // Insert a combining underscore at the correct position\n    input = input.slice(0, position) + \"\\u0332\" + input.slice(position);\n\n    // Extract some context from the input and add it to the error\n    var begin = Math.max(0, position - 15);\n    var end = position + 15;\n    error += input.slice(begin, end);\n  }\n\n  // Some hackery to make ParseError a prototype of Error\n  // See http://stackoverflow.com/a/8460753\n  var self = new Error(error);\n  self.name = \"ParseError\";\n  self.__proto__ = ParseError.prototype;\n  self.position = position;\n  return self;\n}\n\n// More hackery\nParseError.prototype.__proto__ = Error.prototype;\nmodule.exports = ParseError;","map":null,"metadata":{},"sourceType":"script"}