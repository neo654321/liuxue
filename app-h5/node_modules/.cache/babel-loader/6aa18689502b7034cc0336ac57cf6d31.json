{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\n// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nvar disableCheckboxes = true;\nvar useLabelWrapper = false;\nvar useLabelAfter = false;\nmodule.exports = function (md, options) {\n  if (options) {\n    disableCheckboxes = !options.enabled;\n    useLabelWrapper = !!options.label;\n    useLabelAfter = !!options.labelAfter;\n  }\n  md.core.ruler.after('inline', 'github-task-lists', function (state) {\n    var tokens = state.tokens;\n    for (var i = 2; i < tokens.length; i++) {\n      if (isTodoItem(tokens, i)) {\n        todoify(tokens[i], state.Token);\n        attrSet(tokens[i - 2], 'class', 'task-list-item' + (!disableCheckboxes ? ' enabled' : ''));\n        attrSet(tokens[parentToken(tokens, i - 2)], 'class', 'contains-task-list');\n      }\n    }\n  });\n};\nfunction attrSet(token, name, value) {\n  var index = token.attrIndex(name);\n  var attr = [name, value];\n  if (index < 0) {\n    token.attrPush(attr);\n  } else {\n    token.attrs[index] = attr;\n  }\n}\nfunction parentToken(tokens, index) {\n  var targetLevel = tokens[index].level - 1;\n  for (var i = index - 1; i >= 0; i--) {\n    if (tokens[i].level === targetLevel) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction isTodoItem(tokens, index) {\n  return isInline(tokens[index]) && isParagraph(tokens[index - 1]) && isListItem(tokens[index - 2]) && startsWithTodoMarkdown(tokens[index]);\n}\nfunction todoify(token, TokenConstructor) {\n  token.children.unshift(makeCheckbox(token, TokenConstructor));\n  token.children[1].content = token.children[1].content.slice(3);\n  token.content = token.content.slice(3);\n  if (useLabelWrapper) {\n    if (useLabelAfter) {\n      token.children.pop();\n\n      // Use large random number as id property of the checkbox.\n      var id = 'task-item-' + Math.ceil(Math.random() * (10000 * 1000) - 1000);\n      token.children[0].content = token.children[0].content.slice(0, -1) + ' id=\"' + id + '\">';\n      token.children.push(afterLabel(token.content, id, TokenConstructor));\n    } else {\n      token.children.unshift(beginLabel(TokenConstructor));\n      token.children.push(endLabel(TokenConstructor));\n    }\n  }\n}\nfunction makeCheckbox(token, TokenConstructor) {\n  var checkbox = new TokenConstructor('html_inline', '', 0);\n  var disabledAttr = disableCheckboxes ? ' disabled=\"\" ' : '';\n  if (token.content.indexOf('[ ] ') === 0) {\n    checkbox.content = '<input class=\"task-list-item-checkbox\"' + disabledAttr + 'type=\"checkbox\">';\n  } else if (token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0) {\n    checkbox.content = '<input class=\"task-list-item-checkbox\" checked=\"\"' + disabledAttr + 'type=\"checkbox\">';\n  }\n  return checkbox;\n}\n\n// these next two functions are kind of hacky; probably should really be a\n// true block-level token with .tag=='label'\nfunction beginLabel(TokenConstructor) {\n  var token = new TokenConstructor('html_inline', '', 0);\n  token.content = '<label>';\n  return token;\n}\nfunction endLabel(TokenConstructor) {\n  var token = new TokenConstructor('html_inline', '', 0);\n  token.content = '</label>';\n  return token;\n}\nfunction afterLabel(content, id, TokenConstructor) {\n  var token = new TokenConstructor('html_inline', '', 0);\n  token.content = '<label class=\"task-list-item-label\" for=\"' + id + '\">' + content + '</label>';\n  token.attrs = [{\n    for: id\n  }];\n  return token;\n}\nfunction isInline(token) {\n  return token.type === 'inline';\n}\nfunction isParagraph(token) {\n  return token.type === 'paragraph_open';\n}\nfunction isListItem(token) {\n  return token.type === 'list_item_open';\n}\nfunction startsWithTodoMarkdown(token) {\n  // leading whitespace in a list item is already trimmed off by markdown-it\n  return token.content.indexOf('[ ] ') === 0 || token.content.indexOf('[x] ') === 0 || token.content.indexOf('[X] ') === 0;\n}","map":null,"metadata":{},"sourceType":"script"}