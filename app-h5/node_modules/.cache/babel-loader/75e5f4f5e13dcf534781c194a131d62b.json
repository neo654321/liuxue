{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = function ins_plugin(md) {\n  // Insert each marker as a separate text token, and add it to delimiter list\n  //\n  function tokenize(state, silent) {\n    var i,\n      scanned,\n      token,\n      len,\n      ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n    if (silent) {\n      return false;\n    }\n    if (marker !== 0x2B /* + */) {\n      return false;\n    }\n    scanned = state.scanDelims(state.pos, true);\n    len = scanned.length;\n    ch = String.fromCharCode(marker);\n    if (len < 2) {\n      return false;\n    }\n    if (len % 2) {\n      token = state.push('text', '', 0);\n      token.content = ch;\n      len--;\n    }\n    for (i = 0; i < len; i += 2) {\n      token = state.push('text', '', 0);\n      token.content = ch + ch;\n      state.delimiters.push({\n        marker: marker,\n        jump: i,\n        token: state.tokens.length - 1,\n        level: state.level,\n        end: -1,\n        open: scanned.can_open,\n        close: scanned.can_close\n      });\n    }\n    state.pos += scanned.length;\n    return true;\n  }\n\n  // Walk through delimiter list and replace text tokens with tags\n  //\n  function postProcess(state) {\n    var i,\n      j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n    for (i = 0; i < max; i++) {\n      startDelim = delimiters[i];\n      if (startDelim.marker !== 0x2B /* + */) {\n        continue;\n      }\n      if (startDelim.end === -1) {\n        continue;\n      }\n      endDelim = delimiters[startDelim.end];\n      token = state.tokens[startDelim.token];\n      token.type = 'ins_open';\n      token.tag = 'ins';\n      token.nesting = 1;\n      token.markup = '++';\n      token.content = '';\n      token = state.tokens[endDelim.token];\n      token.type = 'ins_close';\n      token.tag = 'ins';\n      token.nesting = -1;\n      token.markup = '++';\n      token.content = '';\n      if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '+') {\n        loneMarkers.push(endDelim.token - 1);\n      }\n    }\n\n    // If a marker sequence has an odd number of characters, it's splitted\n    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n    // start of the sequence.\n    //\n    // So, we have to move all those markers after subsequent s_close tags.\n    //\n    while (loneMarkers.length) {\n      i = loneMarkers.pop();\n      j = i + 1;\n      while (j < state.tokens.length && state.tokens[j].type === 'ins_close') {\n        j++;\n      }\n      j--;\n      if (i !== j) {\n        token = state.tokens[j];\n        state.tokens[j] = state.tokens[i];\n        state.tokens[i] = token;\n      }\n    }\n  }\n  md.inline.ruler.before('emphasis', 'ins', tokenize);\n  md.inline.ruler2.before('emphasis', 'ins', postProcess);\n};","map":null,"metadata":{},"sourceType":"script"}