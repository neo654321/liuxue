{"ast":null,"code":"require(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.string.replace.js\");\n/**\n * This file contains a list of utility functions which are useful in other\n * files.\n */\n\n/**\n * Provide an `indexOf` function which works in IE8, but defers to native if\n * possible.\n */\nvar nativeIndexOf = Array.prototype.indexOf;\nvar indexOf = function indexOf(list, elem) {\n  if (list == null) {\n    return -1;\n  }\n  if (nativeIndexOf && list.indexOf === nativeIndexOf) {\n    return list.indexOf(elem);\n  }\n  var i = 0;\n  var l = list.length;\n  for (; i < l; i++) {\n    if (list[i] === elem) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Return whether an element is contained in a list\n */\nvar contains = function contains(list, elem) {\n  return indexOf(list, elem) !== -1;\n};\n\n/**\n * Provide a default value if a setting is undefined\n */\nvar deflt = function deflt(setting, defaultIfUndefined) {\n  return setting === undefined ? defaultIfUndefined : setting;\n};\n\n// hyphenate and escape adapted from Facebook's React under Apache 2 license\n\nvar uppercase = /([A-Z])/g;\nvar hyphenate = function hyphenate(str) {\n  return str.replace(uppercase, \"-$1\").toLowerCase();\n};\nvar ESCAPE_LOOKUP = {\n  \"&\": \"&amp;\",\n  \">\": \"&gt;\",\n  \"<\": \"&lt;\",\n  \"\\\"\": \"&quot;\",\n  \"'\": \"&#x27;\"\n};\nvar ESCAPE_REGEX = /[&><\"']/g;\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escape(text) {\n  return (\"\" + text).replace(ESCAPE_REGEX, escaper);\n}\n\n/**\n * A function to set the text content of a DOM element in all supported\n * browsers. Note that we don't define this if there is no document.\n */\nvar setTextContent;\nif (typeof document !== \"undefined\") {\n  var testNode = document.createElement(\"span\");\n  if (\"textContent\" in testNode) {\n    setTextContent = function setTextContent(node, text) {\n      node.textContent = text;\n    };\n  } else {\n    setTextContent = function setTextContent(node, text) {\n      node.innerText = text;\n    };\n  }\n}\n\n/**\n * A function to clear a node.\n */\nfunction clearNode(node) {\n  setTextContent(node, \"\");\n}\nmodule.exports = {\n  contains: contains,\n  deflt: deflt,\n  escape: escape,\n  hyphenate: hyphenate,\n  indexOf: indexOf,\n  setTextContent: setTextContent,\n  clearNode: clearNode\n};","map":null,"metadata":{},"sourceType":"script"}