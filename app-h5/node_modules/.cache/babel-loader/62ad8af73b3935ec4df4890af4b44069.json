{"ast":null,"code":"// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.sort.js\");\nrequire(\"core-js/modules/es.regexp.constructor.js\");\nrequire(\"core-js/modules/es.regexp.dot-all.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.string.replace.js\");\nrequire(\"core-js/modules/es.string.trim.js\");\nmodule.exports = function sub_plugin(md) {\n  var escapeRE = md.utils.escapeRE,\n    arrayReplaceAt = md.utils.arrayReplaceAt;\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  var OTHER_CHARS = ' \\r\\n$+<=>^`|~';\n  var UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;\n  var UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;\n  function abbr_def(state, startLine, endLine, silent) {\n    var label,\n      title,\n      ch,\n      labelStart,\n      labelEnd,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n    if (pos + 2 >= max) {\n      return false;\n    }\n    if (state.src.charCodeAt(pos++) !== 0x2A /* * */) {\n      return false;\n    }\n    if (state.src.charCodeAt(pos++) !== 0x5B /* [ */) {\n      return false;\n    }\n    labelStart = pos;\n    for (; pos < max; pos++) {\n      ch = state.src.charCodeAt(pos);\n      if (ch === 0x5B /* [ */) {\n        return false;\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos;\n        break;\n      } else if (ch === 0x5C /* \\ */) {\n        pos++;\n      }\n    }\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {\n      return false;\n    }\n    if (silent) {\n      return true;\n    }\n    label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1');\n    title = state.src.slice(labelEnd + 2, max).trim();\n    if (label.length === 0) {\n      return false;\n    }\n    if (title.length === 0) {\n      return false;\n    }\n    if (!state.env.abbreviations) {\n      state.env.abbreviations = {};\n    }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title;\n    }\n    state.line = startLine + 1;\n    return true;\n  }\n  function abbr_replace(state) {\n    var i,\n      j,\n      l,\n      tokens,\n      token,\n      text,\n      nodes,\n      pos,\n      reg,\n      m,\n      regText,\n      regSimple,\n      currentToken,\n      blockTokens = state.tokens;\n    if (!state.env.abbreviations) {\n      return;\n    }\n    regSimple = new RegExp('(?:' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(escapeRE).join('|') + ')');\n    regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])' + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(escapeRE).join('|') + ')' + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';\n    reg = new RegExp(regText, 'g');\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') {\n        continue;\n      }\n      tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      for (i = tokens.length - 1; i >= 0; i--) {\n        currentToken = tokens[i];\n        if (currentToken.type !== 'text') {\n          continue;\n        }\n        pos = 0;\n        text = currentToken.content;\n        reg.lastIndex = 0;\n        nodes = [];\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) {\n          continue;\n        }\n        while (m = reg.exec(text)) {\n          if (m.index > 0 || m[1].length > 0) {\n            token = new state.Token('text', '', 0);\n            token.content = text.slice(pos, m.index + m[1].length);\n            nodes.push(token);\n          }\n          token = new state.Token('abbr_open', 'abbr', 1);\n          token.attrs = [['title', state.env.abbreviations[':' + m[2]]]];\n          nodes.push(token);\n          token = new state.Token('text', '', 0);\n          token.content = m[2];\n          nodes.push(token);\n          token = new state.Token('abbr_close', 'abbr', -1);\n          nodes.push(token);\n          reg.lastIndex -= m[3].length;\n          pos = reg.lastIndex;\n        }\n        if (!nodes.length) {\n          continue;\n        }\n        if (pos < text.length) {\n          token = new state.Token('text', '', 0);\n          token.content = text.slice(pos);\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, {\n    alt: ['paragraph', 'reference']\n  });\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);\n};","map":null,"metadata":{},"sourceType":"script"}